Построение статического расписания передачи данных

а) Чупахин Андрей Андреевич;

б) 521 группа;

в) Дополнительные библиотеки не использовались;

г) Описание реализации поиска параметров.
Был реализован алгоритм построения расписания -> ALGO. Критерий - Least Slack First(LSF).
У алгоритма есть 4 параметра:
    - l_sc -> задается из командной строки
    - r_rf -> нужно найти максимум
    - r_mcc -> нужно найти минимум
    - T (интервал планирования) -> высчитывается по входным данным(НОК от периодов работ)

Для поиска параметров была применена следующая переборная схема.
Переборная, так как ничего о виде зависимости полноты расписания от параметров не известно.
Алгоритм запускался в двойном цикле:
    внешний цикл с шагом 0.01 уменьшал r_rf(от 0.99 до 0.0),
    внутренний цикл с шагом 1 увеличивал количество работ в цепочке r_mcc.

Таким образом, находился максимальный резерв и для него минимальное количество работ в цепочке


Длину цепочки можно увеличивать от 1 до MAX(T/min_task_period, tasks_cou nt). Если длина цепочки
равняется длине интервала планирования, то теоретически внутри этой цепочки могут разместиться
все работы, поэтому и высчитывается -> T/min_task_period. Это очень грубая оценка, можно взять,
конечно, в качестве верхней оченки общее количество работ, которое должно выполниться за
весь интервал планирования, но и эта оценка не самая лучшая.

Для оптимизации перебора высчитывались оценки r_mcc: нижняя(r_mcc_min) и верхняя (r_mcc_max).

Методы, вычисляющие оценки:
// estimation of Rmcc(max)
unsigned int TaskContainer::getMaxTresholdTasksInSubCircle(const unsigned int& subCircleTime, double& reserve);

// estimation of Rmcc(min)
unsigned int TaskContainer::getMinTresholdTasksInSubCircle(const unsigned int& subCircleTime);

Оценка r_mcc_min

    1. Сначала оцениваем максимальное количество цепочек в интервале планирование:
        ближайшее сверху к числу (T/l_sc)

    2. Считаем общее количество работ, как сумму ближайших сверху к числам
        (T/<период_i-ой_работы>)

    3. Делим 2 на 3, берем ближайшее сверху и тем самым получаем оценку


Оценка r_mcc_max
Для вычисления этой оценки все работы после считывания их файла сортируются один раз
по возрастанию длительности выполнения

    1. Сначала находим макимальную длительность цепочки:
        l_sc*(1-r_rf)
    2. Далее начинаем заполнять цепочку работами, у которых постепенно увеличивается длительность,
        до тех пор пока уже больше нельзя поместить работу в цепочку.
    3. Длина  итоговой цепочки даст оценку

д) Расписание построилось при следующих параметрах
    r_rf=0.29
    r_mcc=6
    l_sc=5000 microseconds
    Т.е для запуска нужно набрать -> $ ./prog_02160560_521 S1_SPLIT_20ms_025_055_117_my.txt 5

    При l_sc=20ms и l_sc=10ms расписание не строится
